'use strict';

$(function () {
  for (let monster in monsterList) {
    $('<option value=' + monster + '>' + monsterList[monster].slug + '</option>').appendTo('#monster-select');
  }

  $('#monster-select, #cr-select').on('change', function () {
    calculateSelectedMonster();
  });
  calculateSelectedMonster();
});
/**
 * Scales mosnter stats based on the selected template and challenge rating.
 */

function calculateSelectedMonster() {
  let selectedMonster = monsterList[$('#monster-select').val()];
  let targetCR = $('#cr-select').val(); //Start with locked stats and presets for this CR, if any

  let derivedStats = selectedMonster.lockedStats ? Object.assign({}, selectedMonster.lockedStats, selectedMonster.stats[targetCR]) : {}; //Once we have our locked stats, go through the rest of the states to interpolate or extrapolate based on existing values.
  //All of the preset monster statblocks should be complete, but if we ever add "keyframes" for individual stats it may be possible to have CRs without all stats for a template
  //For this reason we do the interpolation for EACH stat individually, rather than finding the closest statblock to draw from

  if (!derivedStats.size) {
    let sizeBenchmarks = findBenchmarksForStat("size", targetCR, selectedMonster);
    derivedStats.size = extrapolateFromBenchmark("size", targetCR, sizeBenchmarks, true);
    derivedStats.size = Math.min(6, Math.round(derivedStats.size));
  }

  let abilityScores = ["str", "con", "dex", "int", "wis", "cha"];
  derivedStats.abilityModifiers = {};

  for (let i = 0; i < abilityScores.length; i++) {
    if (!derivedStats[abilityScores[i]]) {
      let abilityBenchmarks = findBenchmarksForStat(abilityScores[i], targetCR, selectedMonster);
      derivedStats[abilityScores[i]] = Math.round(extrapolateFromBenchmark(abilityScores[i], targetCR, abilityBenchmarks, false));
    }

    derivedStats.abilityModifiers[abilityScores[i]] = abilityScoreModifier(derivedStats[abilityScores[i]]);
  }

  console.log(JSON.stringify(derivedStats)); //Once we have all the stats populate the statblock:

  $('#monster-name').html(selectedMonster.slug);
  $('#monster-subtitle').html(sizes[derivedStats.size].name + ' ' + selectedMonster.type + ', ' + selectedMonster.alignment);

  for (let i = 0; i < abilityScores.length; i++) {
    let abilityScore = abilityScores[i];
    let modifier = abilityScoreModifier(derivedStats[abilityScore]);
    let modifierString = "(" + (modifier >= 0 ? '+' : '') + modifier + ")";
    $('#monster-' + abilityScore).html(derivedStats[abilityScore] + " " + modifierString);
  }
}
/**
 * Converts challenge rating to a "step" so that fractional CRs carry the same weight in scaling as full number CRs.
 *
 * @param {string} cr The challenge rating to convert to a step.
 * @return {number} The relative step for the challenge rating.
 */


function stepForCR(cr) {
  //Fractional CRs are counted as a full step in calculations, ie going from CR 1/8 to 1/4 carries as much weight as going from CR 1 to 2.
  let safeCR = parseFloat(cr);

  switch (safeCR) {
    case 0:
      return 0;

    case 0.125:
      return 1;

    case 0.25:
      return 2;

    case 0.5:
      return 3;

    default:
      return safeCR + 3;
  }
}
/**
 * Finds the closest statblocks above and below the target CR that have the target stat
 *
 * @param {Array} stats The stats to search for
 * @param {string} targetCR The challenge rating to find benchmarks for
 * @param {Object} selectedMonster The monster template for which to find stat benchmarks
 * @return {Object} Benchmarks for the selected stat at the nearest CRs above and below it that had values for that stat.
 */


function findBenchmarksForStat(stats, targetCR, selectedMonster) {
  let statList = Array.isArray(stats) ? stats : [stats];
  let benchmarks = {};

  for (let cr in selectedMonster.stats) {
    let statBlock = selectedMonster.stats[cr];
    let allStatsFound = true;

    for (let i = 0; i < statList.length; i++) {
      allStatsFound = allStatsFound && statBlock[statList[i]];
    }

    if (allStatsFound) {
      if (cr > targetCR) {
        if (!benchmarks.upper || benchmarks.upper.cr > cr) {
          benchmarks.upper = {
            cr: cr
          };

          for (let i = 0; i < statList.length; i++) {
            benchmarks.upper[statList[i]] = statBlock[statList[i]];
          }
        }
      } else {
        if (!benchmarks.lower || benchmarks.lower.cr < cr) {
          benchmarks.lower = {
            cr: cr
          };

          for (let i = 0; i < statList.length; i++) {
            benchmarks.lower[statList[i]] = statBlock[statList[i]];
          }
        }
      }
    }
  }

  return benchmarks;
}
/**
 * Finds the closest statblocks above and below the target CR that have the target stat
 *
 * @param {string} stat The stat to extrapolate
 * @param {string} targetCR The challenge rating to find benchmarks for
 * @param {Object} benchmarks The upper and/or lower benchmarks to extrapolate from
 * @param {boolean} linearExtrapolation If true the extrapolation will be an offset instead of a ratio.
 *  For example, a template with a value of 5 when the average stat is 4 would result in an offset of +1 instead of a multiplier of *1.2.
 * @return {Number} The extrapolated value
 */


function extrapolateFromBenchmark(stat, targetCR, benchmarks, linearExtrapolation) {
  //If a benchmark was only found in one direction we simply use that benchmark to extrapolate a state for the target CR
  //If benchmarks were found above and below, we calculate the target result for BOTH benchmarks, then take a weighted average based on which is closer
  //So if the upper benchmark is 1 step away, and the lower benchmark is 4 steps away, then the upper will count for 80% of the average
  let upperValue, lowerValue;

  if (benchmarks.upper) {
    if (linearExtrapolation) {
      let offset = benchmarks.upper[stat] - averageStats[benchmarks.upper.cr][stat];
      upperValue = offset + averageStats[targetCR][stat];
    } else {
      let ratio = benchmarks.upper[stat] / averageStats[benchmarks.upper.cr][stat];
      upperValue = ratio * averageStats[targetCR][stat];
    }
  }

  if (benchmarks.lower) {
    if (linearExtrapolation) {
      let offset = benchmarks.lower[stat] - averageStats[benchmarks.lower.cr][stat];
      lowerValue = offset + averageStats[targetCR][stat];
    } else {
      let ratio = benchmarks.lower[stat] / averageStats[benchmarks.lower.cr][stat];
      lowerValue = ratio * averageStats[targetCR][stat];
    }
  }

  if (lowerValue) {
    if (upperValue) {
      //If upper and lower take a weighted average
      let upperStep = stepForCR(benchmarks.upper.cr);
      let lowerStep = stepForCR(benchmarks.lower.cr);
      let stepRange = upperStep - lowerStep;
      let targetStep = stepForCR(targetCR);
      let upperWeight = (upperStep - targetStep) / stepRange;
      let lowerWeight = (targetStep - lowerStep) / stepRange;
      return upperWeight * upperValue + lowerWeight * lowerValue;
    }

    return lowerValue;
  }

  return upperValue;
}
/**
 * Calculates the modifier for an ability score
 *
 * @param {string} ability The ability score value
 * @return {number} The ability score modifier
 */


function abilityScoreModifier(ability) {
  return Math.floor((ability - 10) / 2);
}

//# sourceMappingURL=global.min.js.map
