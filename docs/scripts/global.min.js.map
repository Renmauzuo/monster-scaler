{"version":3,"file":"global.min.js","sources":["src/scripts/global.js"],"sourcesContent":["\r\n\r\n$(function () {\r\n\r\n    for (let monster in monsterList) {\r\n        $('<option value='+monster+'>'+monsterList[monster].slug+'</option>').appendTo('#monster-select');\r\n    }\r\n\r\n    $('#monster-select, #cr-select').on('change', function () {\r\n        calculateSelectedMonster();\r\n    });\r\n\r\n    calculateSelectedMonster();\r\n\r\n});\r\n\r\n/**\r\n * Scales mosnter stats based on the selected template and challenge rating.\r\n */\r\nfunction calculateSelectedMonster() {\r\n    let selectedMonster = monsterList[$('#monster-select').val()];\r\n    let targetCR = $('#cr-select').val();\r\n\r\n    //Start with locked stats and presets for this CR, if any\r\n    let derivedStats = selectedMonster.lockedStats ? Object.assign({}, selectedMonster.lockedStats, selectedMonster.stats[targetCR]) : {};\r\n\r\n    //Once we have our locked stats, go through the rest of the states to interpolate or extrapolate based on existing values.\r\n    //All of the preset monster statblocks should be complete, but if we ever add \"keyframes\" for individual stats it may be possible to have CRs without all stats for a template\r\n    //For this reason we do the interpolation for EACH stat individually, rather than finding the closest statblock to draw from\r\n\r\n    if(!derivedStats.size) {\r\n        let sizeBenchmarks = findBenchmarksForStat(\"size\", targetCR, selectedMonster);\r\n        derivedStats.size = extrapolateFromBenchmark(\"size\", targetCR, sizeBenchmarks, true);\r\n        derivedStats.size = Math.min(6, Math.round(derivedStats.size));\r\n    }\r\n\r\n    let abilityScores = [\"str\", \"con\", \"dex\", \"int\", \"wis\", \"cha\"];\r\n    derivedStats.abilityModifiers = {};\r\n    for (let i = 0; i < abilityScores.length; i++) {\r\n        if (!derivedStats[abilityScores[i]]) {\r\n            let abilityBenchmarks = findBenchmarksForStat(abilityScores[i], targetCR, selectedMonster);\r\n            derivedStats[abilityScores[i]] = Math.round(extrapolateFromBenchmark(abilityScores[i], targetCR, abilityBenchmarks, false));\r\n        }\r\n        derivedStats.abilityModifiers[abilityScores[i]] = abilityScoreModifier(derivedStats[abilityScores[i]]);\r\n    }\r\n\r\n\r\n    console.log(JSON.stringify(derivedStats));\r\n\r\n    //Once we have all the stats populate the statblock:\r\n    $('#monster-name').html(selectedMonster.slug);\r\n    $('#monster-type').html(sizes[derivedStats.size].name + ' ' + selectedMonster.type + ', ' + selectedMonster.alignment);\r\n    for (let i = 0; i < abilityScores.length; i++) {\r\n        let abilityScore = abilityScores[i];\r\n        let modifier = abilityScoreModifier(derivedStats[abilityScore]);\r\n        let modifierString = \"(\" + (modifier >= 0 ? '+' : '') + modifier + \")\";\r\n       $('#monster-'+abilityScore).html(derivedStats[abilityScore] + \" \" + modifierString);\r\n    }\r\n}\r\n\r\n/**\r\n * Converts challenge rating to a \"step\" so that fractional CRs carry the same weight in scaling as full number CRs.\r\n *\r\n * @param {string} cr The challenge rating to convert to a step.\r\n * @return {number} The relative step for the challenge rating.\r\n */\r\nfunction stepForCR(cr) {\r\n    //Fractional CRs are counted as a full step in calculations, ie going from CR 1/8 to 1/4 carries as much weight as going from CR 1 to 2.\r\n    let safeCR = parseFloat(cr);\r\n    switch(safeCR) {\r\n        case 0:\r\n            return 0;\r\n        case 0.125:\r\n            return 1;\r\n        case 0.25:\r\n            return 2;\r\n        case 0.5: \r\n            return 3;\r\n        default:\r\n            return safeCR+3;\r\n    }\r\n}\r\n\r\n/**\r\n * Finds the closest statblocks above and below the target CR that have the target stat\r\n *\r\n * @param {Array} stats The stats to search for\r\n * @param {string} targetCR The challenge rating to find benchmarks for\r\n * @param {Object} selectedMonster The monster template for which to find stat benchmarks\r\n * @return {Object} Benchmarks for the selected stat at the nearest CRs above and below it that had values for that stat.\r\n */\r\nfunction findBenchmarksForStat(stats, targetCR, selectedMonster) {\r\n    let statList = Array.isArray(stats) ? stats : [stats];\r\n    let benchmarks = {}\r\n    for (let cr in selectedMonster.stats) {\r\n        let statBlock = selectedMonster.stats[cr];\r\n        let allStatsFound = true;\r\n        for (let i = 0; i < statList.length; i++) {\r\n            allStatsFound = allStatsFound && statBlock[statList[i]];\r\n        }\r\n        if (allStatsFound) {\r\n            if (cr > targetCR) {\r\n                if (!benchmarks.upper || benchmarks.upper.cr > cr) {\r\n                    benchmarks.upper = {\r\n                        cr: cr,\r\n                    }\r\n                    for (let i = 0; i < statList.length; i++) {\r\n                        benchmarks.upper[statList[i]] = statBlock[statList[i]];\r\n                    }\r\n                }\r\n            } else {\r\n                if (!benchmarks.lower || benchmarks.lower.cr < cr) {\r\n                    benchmarks.lower = {\r\n                        cr: cr,\r\n                    }\r\n                    for (let i = 0; i < statList.length; i++) {\r\n                        benchmarks.lower[statList[i]] = statBlock[statList[i]];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return benchmarks;\r\n}\r\n\r\n/**\r\n * Finds the closest statblocks above and below the target CR that have the target stat\r\n *\r\n * @param {string} stat The stat to extrapolate\r\n * @param {string} targetCR The challenge rating to find benchmarks for\r\n * @param {Object} benchmarks The upper and/or lower benchmarks to extrapolate from\r\n * @param {boolean} linearExtrapolation If true the extrapolation will be an offset instead of a ratio.\r\n *  For example, a template with a value of 5 when the average stat is 4 would result in an offset of +1 instead of a multiplier of *1.2.\r\n * @return {Number} The extrapolated value\r\n */\r\nfunction extrapolateFromBenchmark(stat, targetCR, benchmarks, linearExtrapolation) {\r\n    //If a benchmark was only found in one direction we simply use that benchmark to extrapolate a state for the target CR\r\n    //If benchmarks were found above and below, we calculate the target result for BOTH benchmarks, then take a weighted average based on which is closer\r\n    //So if the upper benchmark is 1 step away, and the lower benchmark is 4 steps away, then the upper will count for 80% of the average\r\n    let upperValue, lowerValue;\r\n    if (benchmarks.upper) {\r\n        if (linearExtrapolation) {\r\n            let offset = benchmarks.upper[stat] - averageStats[benchmarks.upper.cr][stat];\r\n            upperValue = offset + averageStats[targetCR][stat];\r\n        } else {\r\n            let ratio = benchmarks.upper[stat] / averageStats[benchmarks.upper.cr][stat];\r\n            upperValue = ratio * averageStats[targetCR][stat];\r\n        }\r\n    }\r\n    if (benchmarks.lower) {\r\n        if (linearExtrapolation) {\r\n            let offset = benchmarks.lower[stat] - averageStats[benchmarks.lower.cr][stat];\r\n            lowerValue = offset + averageStats[targetCR][stat];\r\n        } else {\r\n            let ratio = benchmarks.lower[stat] / averageStats[benchmarks.lower.cr][stat];\r\n            lowerValue = ratio * averageStats[targetCR][stat];\r\n        }\r\n    }\r\n\r\n    if (lowerValue) {\r\n        if (upperValue) {\r\n            //If upper and lower take a weighted average\r\n            let upperStep = stepForCR(benchmarks.upper.cr);\r\n            let lowerStep = stepForCR(benchmarks.lower.cr);\r\n            let stepRange = upperStep - lowerStep;\r\n            let targetStep = stepForCR(targetCR);\r\n            let upperWeight = (upperStep - targetStep) / stepRange;\r\n            let lowerWeight = (targetStep - lowerStep) / stepRange;\r\n            return upperWeight * upperValue + lowerWeight * lowerValue;\r\n        }\r\n        return lowerValue;\r\n    }\r\n    return upperValue;\r\n}\r\n\r\n/**\r\n * Calculates the modifier for an ability score\r\n *\r\n * @param {string} ability The ability score value\r\n * @return {number} The ability score modifier\r\n */\r\n function abilityScoreModifier(ability) {\r\n    return Math.floor((ability - 10) / 2);\r\n}"],"names":["$","monster","monsterList","slug","appendTo","on","calculateSelectedMonster","selectedMonster","val","targetCR","derivedStats","lockedStats","Object","assign","stats","size","sizeBenchmarks","findBenchmarksForStat","extrapolateFromBenchmark","Math","min","round","abilityScores","abilityModifiers","i","length","abilityBenchmarks","abilityScoreModifier","console","log","JSON","stringify","html","sizes","name","type","alignment","abilityScore","modifier","modifierString","stepForCR","cr","safeCR","parseFloat","statList","Array","isArray","benchmarks","statBlock","allStatsFound","upper","lower","stat","linearExtrapolation","upperValue","lowerValue","offset","averageStats","ratio","upperStep","lowerStep","stepRange","targetStep","upperWeight","lowerWeight","ability","floor"],"mappings":"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"}