{"version":3,"file":"global.min.js","sources":["src/scripts/global.js"],"sourcesContent":["\r\n\r\n$(function () {\r\n\r\n    for (let monster in monsterList) {\r\n        $('<option value='+monster+'>'+toSentenceCase(monsterList[monster].slug)+'</option>').appendTo('#monster-select');\r\n    }\r\n\r\n    $('#monster-select, #cr-select').on('change', function () {\r\n        calculateSelectedMonster();\r\n    });\r\n\r\n    calculateSelectedMonster();\r\n\r\n});\r\n\r\n/**\r\n * Scales mosnter stats based on the selected template and challenge rating.\r\n */\r\nfunction calculateSelectedMonster() {\r\n    let selectedMonster = monsterList[$('#monster-select').val()];\r\n    let targetCR = $('#cr-select').val();\r\n\r\n    //Start with locked stats and presets for this CR, if any\r\n    let derivedStats = Object.assign({}, selectedMonster.lockedStats, selectedMonster.stats[targetCR]);\r\n    derivedStats.slug = selectedMonster.slug;\r\n    derivedStats.skills = selectedMonster.skills;\r\n    derivedStats.traits = selectedMonster.traits;\r\n    derivedStats.proficiency = averageStats[targetCR].proficiency;\r\n    //Once we have our locked stats, go through the rest of the states to interpolate or extrapolate based on existing values.\r\n    //All of the preset monster statblocks should be complete, but if we ever add \"keyframes\" for individual stats it may be possible to have CRs without all stats for a template\r\n    //For this reason we do the interpolation for EACH stat individually, rather than finding the closest statblock to draw from\r\n\r\n    if(!derivedStats.size) {\r\n        let sizeBenchmarks = findBenchmarksForStat(\"size\", targetCR, selectedMonster);\r\n        derivedStats.size = extrapolateFromBenchmark(\"size\", targetCR, sizeBenchmarks, true);\r\n        derivedStats.size = Math.min(6, derivedStats.size);\r\n    }\r\n\r\n    let abilityScores = [\"str\", \"con\", \"dex\", \"int\", \"wis\", \"cha\"];\r\n    derivedStats.abilityModifiers = {};\r\n    for (let i = 0; i < abilityScores.length; i++) {\r\n        if (!derivedStats[abilityScores[i]]) {\r\n            let abilityBenchmarks = findBenchmarksForStat(abilityScores[i], targetCR, selectedMonster);\r\n            derivedStats[abilityScores[i]] = extrapolateFromBenchmark(abilityScores[i], targetCR, abilityBenchmarks, false);\r\n        }\r\n        derivedStats.abilityModifiers[abilityScores[i]] = abilityScoreModifier(derivedStats[abilityScores[i]]);\r\n    }\r\n\r\n    if (!derivedStats.naturalArmor) {\r\n        /* \r\n         * CR is more concerned with dervid stats like total AC than source stats like natural armor bonus\r\n         * So instead of extrapolating natural armor on its own we extrapolate total AC then reverse engineer natural armor based on other AC mods\r\n         * This also solves the problem of average natural armor by CR being hard to calcualte, since many creatures don't have natural armor.\r\n         */\r\n        let acBenchmarks = findBenchmarksForStat([\"naturalArmor\", \"dex\"], targetCR, selectedMonster);\r\n        //Creature may not have natural armor at all, in which case we skip this step\r\n        if (acBenchmarks) {\r\n            for (let benchmark in acBenchmarks) {\r\n                //5e is sometimes vague about monster stat calculations, so for simplicity we assume all natural armor allows the full dex modifier\r\n                acBenchmarks[benchmark].ac = 10 + acBenchmarks[benchmark].naturalArmor + abilityScoreModifier(acBenchmarks[benchmark].dex);\r\n            }\r\n            let targetAC = extrapolateFromBenchmark('ac', targetCR, acBenchmarks, false);\r\n            //The max check shouldn't really be necessary, but we don't want to risk a creature with abnormally high dex resulting in a negative natural armor rating\r\n            derivedStats.naturalArmor = Math.max(0, targetAC - 10 - derivedStats.abilityModifiers.dex);\r\n        }\r\n    }\r\n\r\n    if (!derivedStats.hitDice) {\r\n        //Like AC bonuses, we calculate hit dice by extrapolating a target HP number and working backwards rather than extrapolating hit dice directly\r\n        let hpBenchmarks = findBenchmarksForStat([\"size\", \"con\", \"hitDice\"], targetCR, selectedMonster);\r\n        for (let benchmark in hpBenchmarks) {\r\n            let currentBenchmark = hpBenchmarks[benchmark];\r\n            currentBenchmark.hp = Math.floor(hitPointsPerHitDie(currentBenchmark) * currentBenchmark.hitDice);\r\n        }\r\n        let targetHP = extrapolateFromBenchmark('hp', targetCR, hpBenchmarks, false);\r\n        let hpPerHD = hitPointsPerHitDie(derivedStats);\r\n        derivedStats.hitDice = Math.max(1, Math.round(targetHP / hpPerHD));\r\n    }\r\n\r\n    derivedStats.attacks = {};\r\n    //TODO: Account for creatures that may gain attacks as they go up in CR\r\n    for (let attack in selectedMonster.attacks) {\r\n        //For each action aggregate base, locked, and CR specific properties\r\n        derivedStats.attacks[attack] = Object.assign({}, selectedMonster.attacks[attack]);\r\n        if (selectedMonster.lockedStats && selectedMonster.lockedStats.attacks && selectedMonster.lockedStats.attacks[attack]) {\r\n            derivedStats.attacks[attack] = Object.assign({}, derivedStats.attacks[attack], selectedMonster.lockedStats.attacks[attack]);\r\n        }\r\n        if (selectedMonster.stats[targetCR] && selectedMonster.stats[targetCR].attacks && selectedMonster.stats[targetCR].attacks[attack]) {\r\n            derivedStats.attacks[attack] = Object.assign({}, derivedStats.attacks[attack], selectedMonster.stats[targetCR].attacks[attack]);\r\n        }\r\n\r\n        //Fill in the gaps by extrapolating any missing attributes (such as attack damage)\r\n        if (!derivedStats.attacks[attack].damageDice) {\r\n            let damageDiceString = 'attacks__'+attack+'__damageDice';\r\n            let damageDieString =  'attacks__'+attack+'__damageDieSize';\r\n            let attributes = ['str', damageDiceString, damageDieString];\r\n            if (derivedStats.attacks[attack].finesse) {\r\n                attributes.push('dex');\r\n            }\r\n            let damageBenchmarks = findBenchmarksForStat(attributes, targetCR, selectedMonster);\r\n            for (let benchmark in damageBenchmarks) {\r\n                let currentBenchmark = damageBenchmarks[benchmark];\r\n                currentBenchmark.damagePerRound = averageRoll(currentBenchmark[damageDiceString], currentBenchmark[damageDieString]);\r\n                currentBenchmark.damagePerRound +=  abilityScoreModifier(derivedStats.attacks[attack].finesse ? Math.max(currentBenchmark.str, currentBenchmark.dex) : currentBenchmark.str);\r\n            }\r\n            let estimatedDamage = extrapolateFromBenchmark('damagePerRound', targetCR, damageBenchmarks, false);\r\n            let targetDamage = estimatedDamage - (derivedStats.attacks[attack].finesse ? Math.max(derivedStats.abilityModifiers.str, derivedStats.abilityModifiers.dex) : derivedStats.abilityModifiers.str);\r\n            //console.log(targetDamage);\r\n            let estimatedDice = findDamageDice(targetDamage);\r\n            derivedStats.attacks[attack].damageDice = estimatedDice[0];\r\n            derivedStats.attacks[attack].damageDieSize = estimatedDice[1];\r\n        }\r\n    }\r\n\r\n    //console.log(JSON.stringify(derivedStats));\r\n\r\n    //Once we have all the stats populate the statblock:\r\n    $('#monster-name').html(findNearestLowerBenchmark(\"name\", targetCR, selectedMonster));\r\n    $('#monster-type').html(sizes[derivedStats.size].name + ' ' + selectedMonster.type + ', ' + selectedMonster.alignment);\r\n\r\n    //TODO: Pick the appropriate AC formula if a creature has options (ie, natural armor vs worn armor)\r\n    if (derivedStats.naturalArmor) {\r\n        $('#armor-class span').html((10 + derivedStats.naturalArmor + derivedStats.abilityModifiers.dex) + ' (Natural Armor)');\r\n    } else {\r\n        $('#armor-class span').html(10 + derivedStats.abilityModifiers.dex);\r\n    }\r\n    $('#hit-points span').html(Math.floor(hitPointsPerHitDie(derivedStats)*derivedStats.hitDice)+' ('+derivedStats.hitDice+'d'+sizes[derivedStats.size].hitDie+'+'+(derivedStats.abilityModifiers.con*derivedStats.hitDice)+')');\r\n    $('#speed span').html(findNearestLowerBenchmark('speed', targetCR, selectedMonster) + ' ft.');\r\n\r\n    for (let i = 0; i < abilityScores.length; i++) {\r\n        let abilityScore = abilityScores[i];\r\n        let modifier = abilityScoreModifier(derivedStats[abilityScore]);\r\n        let modifierString = \"(\" + (modifier >= 0 ? '+' : '') + modifier + \")\";\r\n       $('#monster-'+abilityScore).html(derivedStats[abilityScore] + \" \" + modifierString);\r\n    }\r\n\r\n    //TODO: When we add homebrow monsters we may need to account for creatures that gain new skills as they go up in CR.\r\n    if (derivedStats.skills) {\r\n        $('#skills').show();\r\n        let skillString = \"\";\r\n        for (let i = 0; i < derivedStats.skills.length; i ++) {\r\n            if (i > 0) {\r\n                skillString += ', ';\r\n            }\r\n            let skillModifier = averageStats[targetCR].proficiency + derivedStats.abilityModifiers[skills[derivedStats.skills[i]]];\r\n            let modifierString = (skillModifier >= 0 ? '+' : '') + skillModifier;\r\n            skillString+= toSentenceCase(derivedStats.skills[i]) + ' ' + modifierString;\r\n        }\r\n        $('#skills span').html(skillString);\r\n    } else {\r\n        $('#skills').hide();\r\n    }\r\n\r\n    //TODO: Add additional senses\r\n    let passivePerceptionString = 'passive Perception ' + (10 + derivedStats.abilityModifiers.wis + (derivedStats.skills && derivedStats.skills.includes('perception') ? averageStats[targetCR].proficiency : 0));\r\n    $('#senses span').html(passivePerceptionString);\r\n\r\n    $('#challenge-rating span').html(stringForCR(targetCR) + ' (' + averageStats[targetCR].xp.toLocaleString() + ' XP)');\r\n\r\n    $('#traits').empty();\r\n    if (derivedStats.traits) {\r\n        for (let i = 0; i < derivedStats.traits.length; i++) {\r\n            let currentTrait = traits[derivedStats.traits[i]];\r\n            $('<p><strong><em>'+currentTrait.name+'.</em></strong> '+replaceTokensInString(currentTrait.description, derivedStats)+'</p>').appendTo('#traits');\r\n        }\r\n    }\r\n\r\n    $('#attacks').empty();\r\n    if (derivedStats.attacks) {\r\n        for (let attack in derivedStats.attacks) {\r\n            let currentAttack = derivedStats.attacks[attack];\r\n            let attackString = '<strong>'+currentAttack.name+'.</strong> ';\r\n            attackString += '<em>' + (currentAttack.ranged ? 'Ranged' : 'Melee') + ' Weapon Attack:</em> ';\r\n            let abilityModifier = currentAttack.finesse ? Math.max(derivedStats.abilityModifiers.str, derivedStats.abilityModifiers.dex) : derivedStats.abilityModifiers.str;\r\n            attackString += '+' + (derivedStats.proficiency + abilityModifier) + ' to hit, reach ' + currentAttack.reach + ' ft., one target. ';\r\n            attackString += '<em>Hit:</em> ' + (averageRoll(currentAttack.damageDice, currentAttack.damageDieSize) + abilityModifier) + ' (' + currentAttack.damageDice + 'd' + currentAttack.damageDieSize + ' + ' + abilityModifier + ') ' + currentAttack.damageType + ' damage.';\r\n            if (currentAttack.proc) {\r\n                attackString+= ' ' + replaceTokensInString(procs[currentAttack.proc], derivedStats);\r\n            }\r\n            $('<p>'+attackString+'</p>').appendTo('#attacks');\r\n        }\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * Converts challenge rating to a \"step\" so that fractional CRs carry the same weight in scaling as full number CRs.\r\n *\r\n * @param {string} cr The challenge rating to convert to a step.\r\n * @return {number} The relative step for the challenge rating.\r\n */\r\nfunction stepForCR(cr) {\r\n    //Fractional CRs are counted as a full step in calculations, ie going from CR 1/8 to 1/4 carries as much weight as going from CR 1 to 2.\r\n    let safeCR = parseFloat(cr);\r\n    switch(safeCR) {\r\n        case 0:\r\n            return 0;\r\n        case 0.125:\r\n            return 1;\r\n        case 0.25:\r\n            return 2;\r\n        case 0.5: \r\n            return 3;\r\n        default:\r\n            return safeCR+3;\r\n    }\r\n}\r\n\r\n/**\r\n * Converts challenge rating to a string so that decimal CRs become fractions\r\n *\r\n * @param {string} cr The challenge rating to convert to a string.\r\n * @return {string} The string version of the challenge rating\r\n */\r\n function stringForCR(cr) {\r\n    let safeCR = parseFloat(cr);\r\n    switch(safeCR) {\r\n        case 0.125:\r\n            return '1/8';\r\n        case 0.25:\r\n            return '1/4';\r\n        case 0.5: \r\n            return '1/2';\r\n        default:\r\n            return cr;\r\n    }\r\n}\r\n\r\n/**\r\n * Finds the closest statblocks above and below the target CR that have the target stat\r\n *\r\n * @param {Array} stats The stats to search for\r\n * @param {string} targetCR The challenge rating to find benchmarks for\r\n * @param {Object} selectedMonster The monster template for which to find stat benchmarks\r\n * @return {Object} Benchmarks for the selected stat at the nearest CRs above and below it that had values for that stat.\r\n */\r\nfunction findBenchmarksForStat(stats, targetCR, selectedMonster) {\r\n    let statList = Array.isArray(stats) ? stats : [stats];\r\n    let benchmarks = null;\r\n    for (let cr in selectedMonster.stats) {\r\n        let statBlock = flattenObject(selectedMonster.stats[cr]);\r\n        let allStatsFound = true;\r\n        for (let i = 0; i < statList.length; i++) {\r\n            allStatsFound = allStatsFound && statBlock[statList[i]];\r\n            if (!allStatsFound) {\r\n                break;\r\n            }\r\n        }\r\n        if (allStatsFound) {\r\n            if (!benchmarks) {\r\n                benchmarks = {};\r\n            }\r\n            if (cr > targetCR) {\r\n                if (!benchmarks.upper || benchmarks.upper.cr > cr) {\r\n                    benchmarks.upper = {\r\n                        cr: cr,\r\n                    }\r\n                    for (let i = 0; i < statList.length; i++) {\r\n                        benchmarks.upper[statList[i]] = statBlock[statList[i]];\r\n                    }\r\n                }\r\n            } else {\r\n                if (!benchmarks.lower || benchmarks.lower.cr < cr) {\r\n                    benchmarks.lower = {\r\n                        cr: cr,\r\n                    }\r\n                    for (let i = 0; i < statList.length; i++) {\r\n                        benchmarks.lower[statList[i]] = statBlock[statList[i]];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return benchmarks;\r\n}\r\n\r\n/**\r\n * Finds the closest statblocks above and below the target CR that have the target stat\r\n *\r\n * @param {string} stat The stat to extrapolate\r\n * @param {string} targetCR The challenge rating to find benchmarks for\r\n * @param {Object} benchmarks The upper and/or lower benchmarks to extrapolate from\r\n * @param {boolean} linearExtrapolation If true the extrapolation will be an offset instead of a ratio.\r\n *  For example, a template with a value of 5 when the average stat is 4 would result in an offset of +1 instead of a multiplier of *1.2.\r\n * @return {Number} The extrapolated value\r\n */\r\nfunction extrapolateFromBenchmark(stat, targetCR, benchmarks, linearExtrapolation) {\r\n    //If a benchmark was only found in one direction we simply use that benchmark to extrapolate a state for the target CR\r\n    //If benchmarks were found above and below, we calculate the target result for BOTH benchmarks, then take a weighted average based on which is closer\r\n    //So if the upper benchmark is 1 step away, and the lower benchmark is 4 steps away, then the upper will count for 80% of the average\r\n    let upperValue, lowerValue;\r\n    if (benchmarks.upper) {\r\n        if (linearExtrapolation) {\r\n            let offset = benchmarks.upper[stat] - averageStats[benchmarks.upper.cr][stat];\r\n            upperValue = offset + averageStats[targetCR][stat];\r\n        } else {\r\n            let ratio = benchmarks.upper[stat] / averageStats[benchmarks.upper.cr][stat];\r\n            upperValue = ratio * averageStats[targetCR][stat];\r\n        }\r\n    }\r\n    if (benchmarks.lower) {\r\n        if (linearExtrapolation) {\r\n            let offset = benchmarks.lower[stat] - averageStats[benchmarks.lower.cr][stat];\r\n            lowerValue = offset + averageStats[targetCR][stat];\r\n        } else {\r\n            let ratio = benchmarks.lower[stat] / averageStats[benchmarks.lower.cr][stat];\r\n            lowerValue = ratio * averageStats[targetCR][stat];\r\n        }\r\n    }\r\n\r\n    if (lowerValue) {\r\n        if (upperValue) {\r\n            //If upper and lower take a weighted average\r\n            let upperStep = stepForCR(benchmarks.upper.cr);\r\n            let lowerStep = stepForCR(benchmarks.lower.cr);\r\n            let stepRange = upperStep - lowerStep;\r\n            let targetStep = stepForCR(targetCR);\r\n            let upperWeight = (upperStep - targetStep) / stepRange;\r\n            let lowerWeight = (targetStep - lowerStep) / stepRange;\r\n            return Math.round(upperWeight * upperValue + lowerWeight * lowerValue);\r\n        }\r\n        return Math.round(lowerValue);\r\n    }\r\n    return Math.round(upperValue);\r\n}\r\n\r\n/**\r\n * Calculates the modifier for an ability score\r\n *\r\n * @param {string} ability The ability score value\r\n * @return {number} The ability score modifier\r\n */\r\n function abilityScoreModifier(ability) {\r\n    return Math.floor((ability - 10) / 2);\r\n}\r\n\r\n/**\r\n * Calculates the hit dice per hit die for a creature\r\n *\r\n * @param {Object} statblock The statblock. Must have size and con\r\n * @return {number} The number of hit points\r\n */\r\n function hitPointsPerHitDie(statblock) {\r\n    return ((sizes[statblock.size].hitDie + 1) / 2) + abilityScoreModifier(statblock.con);\r\n}\r\n\r\n/**\r\n * Finds the closest benchmark that is below the target CR. If there are none then it returns the lowest benchmark.\r\n *\r\n * @param {string} stat The stat to search for\r\n * @param {string} targetCR The target challenge rating\r\n * @param {Object} selectedMonster The monster to search \r\n * @return {number} The number of hit points\r\n */\r\n function findNearestLowerBenchmark(stat, targetCR, selectedMonster) {\r\n    let numTargetCR = parseFloat(targetCR);\r\n    let statList = selectedMonster.stats;\r\n    let lowestValue;\r\n    let lowestCR = 31;\r\n    let highestValue;\r\n    let highestCR = 0;\r\n    for (let cr in statList) {\r\n        let numCR = parseFloat(cr);\r\n        if (statList[cr][stat]) {\r\n            if (numCR < lowestCR) {\r\n                lowestCR = cr;\r\n                lowestValue = statList[cr][stat];\r\n            }\r\n            if (numCR > highestCR && numCR <= numTargetCR) {\r\n                highestValue = statList[cr][stat];\r\n                highestCR = cr;\r\n            }\r\n        }\r\n    }\r\n    return highestValue != null ? highestValue : lowestValue;\r\n}\r\n\r\n/**\r\n * Returns a sentence case version of a string\r\n *\r\n * @param {string} targetString The string to convert to sentence case\r\n * @return {string} The sentence case string\r\n */\r\n function toSentenceCase(targetString) {\r\n    return targetString[0].toUpperCase() + targetString.substr(1);\r\n }\r\n \r\n /**\r\n * Replaced various tokens in a string with appropriate values\r\n *\r\n * @param {string} targetString The string in which to find and replace tokens\r\n * @param {Object} statBlock The statblock to use when replacing stat related tokens, such as save DCs\r\n * @return {string} The sentence case string\r\n */\r\n  function replaceTokensInString(targetString, statBlock) {\r\n    let outputString = targetString;\r\n    while (outputString.indexOf('{{') >= 0) {\r\n        let tokenStartIndex = outputString.indexOf('{{');\r\n        let tokenEndIndex = outputString.indexOf('}}')+2;\r\n        let fullToken = outputString.substr(tokenStartIndex,tokenEndIndex-tokenStartIndex);\r\n        let token = fullToken.substr(2, fullToken.length-4);\r\n        let tokenValue = '';\r\n\r\n        if (statBlock[token]) {\r\n            tokenValue = statBlock[token];\r\n        } else {\r\n            let tokenArray = token.split(':');\r\n            if (tokenArray[0] == 'DC') {\r\n                tokenValue = 8 + statBlock.proficiency + statBlock.abilityModifiers[tokenArray[1]];\r\n            }\r\n        }\r\n\r\n        outputString = outputString.replace(fullToken, tokenValue);\r\n    } \r\n    return outputString;\r\n }\r\n\r\n /**\r\n * Recursively flattens and object. ie, {x: {y:5}, z: 10} would become {x__y : 5, z : 10}\r\n *\r\n * @param {Object} targetObject The object to flatten\r\n * @return {Object} The flattened object\r\n */\r\n  function flattenObject(targetObject) {\r\n    let outputObject = {};\r\n    for (let property in targetObject) {\r\n        let value = targetObject[property];\r\n        if (typeof(value) == 'object') {\r\n            let flattenedChild = flattenObject(value);\r\n            for (let childProperty in flattenedChild) {\r\n                outputObject[property+'__'+childProperty] = flattenedChild[childProperty];\r\n            }\r\n        } else {\r\n            outputObject[property] = value;\r\n        }\r\n    }\r\n    return outputObject;\r\n}\r\n\r\n /**\r\n * Returns the average roll for a number of dice\r\n *\r\n * @param {Number} diceCount The number of dice to roll\r\n * @param {Number} dieSize The size of the dice being rolled\r\n * @return {Number} The average roll, rounded down\r\n */\r\n  function averageRoll(diceCount, dieSize) {\r\n      let averagePerDie = (1 + dieSize) / 2;\r\n      return Math.floor(diceCount * averagePerDie);\r\n  }\r\n\r\n/**\r\n * Returns an appropriate damage die size and count to reach an estiamted average damage number\r\n *\r\n * @param {Number} targetDamage The target average damage\r\n * @return {Array} An array containing number of dice at index 0 and die size at index 1\r\n */\r\nfunction findDamageDice(targetDamage) {\r\n    //TODO: This algorithm could probably use some work. We want to find the right balance between getting close to the desired average damage and not having tons of dice\r\n    //We may want to cap damage dice for specific attacks and split high damage attacks into multiattacks\r\n    //This method tries to find the damage die that would yield the best average damage, but favors larger dice so mosnters don't all end up using loads of d4s.\r\n    let dice = [12, 10, 8, 6, 4];\r\n    let dieAverages = [6.5, 5.5, 4.5, 3.5, 2.5];\r\n    let smallestDifference = 7;\r\n    let optimalDieSize;\r\n    let optimalDieCount = -1;\r\n    for (let i = 0; i < dieAverages.length; i++) {\r\n        //Find the approximate number of dice to reach the target average, and measure how close it actually gets us\r\n        let dieCount = Math.max(1, Math.round(targetDamage/dieAverages[i]));\r\n        let closestAverage = dieAverages[i] * dieCount;\r\n        let difference = Math.abs(targetDamage - closestAverage);\r\n        if (difference < smallestDifference && (dieCount < 5 || (dieCount / optimalDieCount) < 1.5)) {\r\n            smallestDifference = difference;\r\n            optimalDieSize = dice[i];\r\n            optimalDieCount = dieCount;\r\n        }\r\n    }\r\n    return [optimalDieCount, optimalDieSize];\r\n}"],"names":["$","monster","monsterList","toSentenceCase","slug","appendTo","on","calculateSelectedMonster","selectedMonster","val","targetCR","derivedStats","Object","assign","lockedStats","stats","skills","traits","proficiency","averageStats","size","sizeBenchmarks","findBenchmarksForStat","extrapolateFromBenchmark","Math","min","abilityScores","abilityModifiers","i","length","abilityBenchmarks","abilityScoreModifier","naturalArmor","acBenchmarks","benchmark","ac","dex","targetAC","max","hitDice","hpBenchmarks","currentBenchmark","hp","floor","hitPointsPerHitDie","targetHP","hpPerHD","round","attacks","attack","damageDice","damageDiceString","damageDieString","attributes","finesse","push","damageBenchmarks","damagePerRound","averageRoll","str","estimatedDamage","targetDamage","estimatedDice","findDamageDice","damageDieSize","html","findNearestLowerBenchmark","sizes","name","type","alignment","hitDie","con","abilityScore","modifier","modifierString","show","skillString","skillModifier","hide","passivePerceptionString","wis","includes","stringForCR","xp","toLocaleString","empty","currentTrait","replaceTokensInString","description","currentAttack","attackString","ranged","abilityModifier","reach","damageType","proc","procs","stepForCR","cr","safeCR","parseFloat","statList","Array","isArray","benchmarks","statBlock","flattenObject","allStatsFound","upper","lower","stat","linearExtrapolation","upperValue","lowerValue","offset","ratio","upperStep","lowerStep","stepRange","targetStep","upperWeight","lowerWeight","ability","statblock","numTargetCR","lowestValue","lowestCR","highestValue","highestCR","numCR","targetString","toUpperCase","substr","outputString","indexOf","tokenStartIndex","tokenEndIndex","fullToken","token","tokenValue","tokenArray","split","replace","targetObject","outputObject","property","value","flattenedChild","childProperty","diceCount","dieSize","averagePerDie","dice","dieAverages","smallestDifference","optimalDieSize","optimalDieCount","dieCount","closestAverage","difference","abs"],"mappings":"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"}