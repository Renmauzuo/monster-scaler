{"version":3,"file":"global.min.js","sources":["src/scripts/global.js"],"sourcesContent":["\r\n\r\n$(function () {\r\n\r\n    for (let monster in monsterList) {\r\n        $('<option value='+monster+'>'+monsterList[monster].slug+'</option>').appendTo('#monster-select');\r\n    }\r\n\r\n    $('#monster-select, #cr-select').on('change', function () {\r\n        calculateSelectedMonster();\r\n    });\r\n\r\n    calculateSelectedMonster();\r\n\r\n});\r\n\r\n/**\r\n * Scales mosnter stats based on the selected template and challenge rating.\r\n */\r\nfunction calculateSelectedMonster() {\r\n    let selectedMonster = monsterList[$('#monster-select').val()];\r\n    let targetCR = $('#cr-select').val();\r\n\r\n    //Start with locked stats and presets for this CR, if any\r\n    let derivedStats = selectedMonster.lockedStats ? Object.assign({}, selectedMonster.lockedStats, selectedMonster.stats[targetCR]) : {};\r\n    derivedStats.skills = selectedMonster.skills;\r\n    //Once we have our locked stats, go through the rest of the states to interpolate or extrapolate based on existing values.\r\n    //All of the preset monster statblocks should be complete, but if we ever add \"keyframes\" for individual stats it may be possible to have CRs without all stats for a template\r\n    //For this reason we do the interpolation for EACH stat individually, rather than finding the closest statblock to draw from\r\n\r\n    if(!derivedStats.size) {\r\n        let sizeBenchmarks = findBenchmarksForStat(\"size\", targetCR, selectedMonster);\r\n        derivedStats.size = extrapolateFromBenchmark(\"size\", targetCR, sizeBenchmarks, true);\r\n        derivedStats.size = Math.min(6, derivedStats.size);\r\n    }\r\n\r\n    let abilityScores = [\"str\", \"con\", \"dex\", \"int\", \"wis\", \"cha\"];\r\n    derivedStats.abilityModifiers = {};\r\n    for (let i = 0; i < abilityScores.length; i++) {\r\n        if (!derivedStats[abilityScores[i]]) {\r\n            let abilityBenchmarks = findBenchmarksForStat(abilityScores[i], targetCR, selectedMonster);\r\n            derivedStats[abilityScores[i]] = extrapolateFromBenchmark(abilityScores[i], targetCR, abilityBenchmarks, false);\r\n        }\r\n        derivedStats.abilityModifiers[abilityScores[i]] = abilityScoreModifier(derivedStats[abilityScores[i]]);\r\n    }\r\n\r\n    if (!derivedStats.naturalArmor) {\r\n        /* \r\n         * CR is more concerned with dervid stats like total AC than source stats like natural armor bonus\r\n         * So instead of extrapolating natural armor on its own we extrapolate total AC then reverse engineer natural armor based on other AC mods\r\n         * This also solves the problem of average natural armor by CR being hard to calcualte, since many creatures don't have natural armor.\r\n         */\r\n        let acBenchmarks = findBenchmarksForStat([\"naturalArmor\", \"dex\"], targetCR, selectedMonster);\r\n        //Creature may not have natural armor at all, in which case we skip this step\r\n        if (acBenchmarks) {\r\n            for (let benchmark in acBenchmarks) {\r\n                //5e is sometimes vague about monster stat calculations, so for simplicity we assume all natural armor allows the full dex modifier\r\n                acBenchmarks[benchmark].ac = 10 + acBenchmarks[benchmark].naturalArmor + abilityScoreModifier(acBenchmarks[benchmark].dex);\r\n            }\r\n            let targetAC = extrapolateFromBenchmark('ac', targetCR, acBenchmarks, false);\r\n            //The max check shouldn't really be necessary, but we don't want to risk a creature with abnormally high dex resulting in a negative natural armor rating\r\n            derivedStats.naturalArmor = Math.max(0, targetAC - 10 - derivedStats.abilityModifiers.dex);\r\n        }\r\n    }\r\n\r\n    if (!derivedStats.hitDice) {\r\n        //Like AC bonuses, we calculate hit dice by extrapolating a target HP number and working backwards rather than extrapolating hit dice directly\r\n        let hpBenchmarks = findBenchmarksForStat([\"size\", \"con\", \"hitDice\"], targetCR, selectedMonster);\r\n        for (let benchmark in hpBenchmarks) {\r\n            let currentBenchmark = hpBenchmarks[benchmark];\r\n            currentBenchmark.hp = Math.floor(hitPointsPerHitDie(currentBenchmark) * currentBenchmark.hitDice);\r\n        }\r\n        let targetHP = extrapolateFromBenchmark('hp', targetCR, hpBenchmarks, false);\r\n        let hpPerHD = hitPointsPerHitDie(derivedStats);\r\n        derivedStats.hitDice = Math.max(1, Math.round(targetHP / hpPerHD));\r\n    }\r\n\r\n    //console.log(JSON.stringify(derivedStats));\r\n\r\n    //Once we have all the stats populate the statblock:\r\n    $('#monster-name').html(findNearestLowerBenchmark(\"name\", targetCR, selectedMonster));\r\n    $('#monster-type').html(sizes[derivedStats.size].name + ' ' + selectedMonster.type + ', ' + selectedMonster.alignment);\r\n\r\n    //TODO: Pick the appropriate AC formula if a creature has options (ie, natural armor vs worn armor)\r\n    if (derivedStats.naturalArmor) {\r\n        $('#armor-class span').html((10 + derivedStats.naturalArmor + derivedStats.abilityModifiers.dex) + ' (Natural Armor)');\r\n    } else {\r\n        $('#armor-class span').html(10 + derivedStats.abilityModifiers.dex);\r\n    }\r\n    $('#hit-points span').html(Math.floor(hitPointsPerHitDie(derivedStats)*derivedStats.hitDice)+' ('+derivedStats.hitDice+'d'+sizes[derivedStats.size].hitDie+'+'+(derivedStats.abilityModifiers.con*derivedStats.hitDice)+')');\r\n    $('#speed span').html(findNearestLowerBenchmark('speed', targetCR, selectedMonster) + ' ft.');\r\n\r\n    //TODO: When we add homebrow monsters we may need to account for creatures that gain new skills as they go up in CR.\r\n    if (derivedStats.skills) {\r\n        $('#skills').show();\r\n        let skillString = \"\";\r\n        for (let i = 0; i < derivedStats.skills.length; i ++) {\r\n            if (i > 0) {\r\n                skillString += ', ';\r\n            }\r\n            let skillModifier = averageStats[targetCR].proficiency + derivedStats.abilityModifiers[skills[derivedStats.skills[i]]];\r\n            let modifierString = (skillModifier >= 0 ? '+' : '') + skillModifier;\r\n            skillString+= toSentenceCase(derivedStats.skills[i]) + ' ' + modifierString;\r\n        }\r\n        $('#skills span').html(skillString);\r\n    } else {\r\n        $('#skills').hide();\r\n    }\r\n\r\n    //TODO: Add additional senses\r\n    let passivePerceptionString = 'passive Perception ' + (10 + derivedStats.abilityModifiers.wis + (derivedStats.skills && derivedStats.skills.includes('perception') ? averageStats[targetCR].proficiency : 0));\r\n    $('#senses span').html(passivePerceptionString);\r\n\r\n    for (let i = 0; i < abilityScores.length; i++) {\r\n        let abilityScore = abilityScores[i];\r\n        let modifier = abilityScoreModifier(derivedStats[abilityScore]);\r\n        let modifierString = \"(\" + (modifier >= 0 ? '+' : '') + modifier + \")\";\r\n       $('#monster-'+abilityScore).html(derivedStats[abilityScore] + \" \" + modifierString);\r\n    }\r\n}\r\n\r\n/**\r\n * Converts challenge rating to a \"step\" so that fractional CRs carry the same weight in scaling as full number CRs.\r\n *\r\n * @param {string} cr The challenge rating to convert to a step.\r\n * @return {number} The relative step for the challenge rating.\r\n */\r\nfunction stepForCR(cr) {\r\n    //Fractional CRs are counted as a full step in calculations, ie going from CR 1/8 to 1/4 carries as much weight as going from CR 1 to 2.\r\n    let safeCR = parseFloat(cr);\r\n    switch(safeCR) {\r\n        case 0:\r\n            return 0;\r\n        case 0.125:\r\n            return 1;\r\n        case 0.25:\r\n            return 2;\r\n        case 0.5: \r\n            return 3;\r\n        default:\r\n            return safeCR+3;\r\n    }\r\n}\r\n\r\n/**\r\n * Finds the closest statblocks above and below the target CR that have the target stat\r\n *\r\n * @param {Array} stats The stats to search for\r\n * @param {string} targetCR The challenge rating to find benchmarks for\r\n * @param {Object} selectedMonster The monster template for which to find stat benchmarks\r\n * @return {Object} Benchmarks for the selected stat at the nearest CRs above and below it that had values for that stat.\r\n */\r\nfunction findBenchmarksForStat(stats, targetCR, selectedMonster) {\r\n    let statList = Array.isArray(stats) ? stats : [stats];\r\n    let benchmarks = null;\r\n    for (let cr in selectedMonster.stats) {\r\n        let statBlock = selectedMonster.stats[cr];\r\n        let allStatsFound = true;\r\n        for (let i = 0; i < statList.length; i++) {\r\n            allStatsFound = allStatsFound && statBlock[statList[i]];\r\n        }\r\n        if (allStatsFound) {\r\n            if (!benchmarks) {\r\n                benchmarks = {};\r\n            }\r\n            if (cr > targetCR) {\r\n                if (!benchmarks.upper || benchmarks.upper.cr > cr) {\r\n                    benchmarks.upper = {\r\n                        cr: cr,\r\n                    }\r\n                    for (let i = 0; i < statList.length; i++) {\r\n                        benchmarks.upper[statList[i]] = statBlock[statList[i]];\r\n                    }\r\n                }\r\n            } else {\r\n                if (!benchmarks.lower || benchmarks.lower.cr < cr) {\r\n                    benchmarks.lower = {\r\n                        cr: cr,\r\n                    }\r\n                    for (let i = 0; i < statList.length; i++) {\r\n                        benchmarks.lower[statList[i]] = statBlock[statList[i]];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return benchmarks;\r\n}\r\n\r\n/**\r\n * Finds the closest statblocks above and below the target CR that have the target stat\r\n *\r\n * @param {string} stat The stat to extrapolate\r\n * @param {string} targetCR The challenge rating to find benchmarks for\r\n * @param {Object} benchmarks The upper and/or lower benchmarks to extrapolate from\r\n * @param {boolean} linearExtrapolation If true the extrapolation will be an offset instead of a ratio.\r\n *  For example, a template with a value of 5 when the average stat is 4 would result in an offset of +1 instead of a multiplier of *1.2.\r\n * @return {Number} The extrapolated value\r\n */\r\nfunction extrapolateFromBenchmark(stat, targetCR, benchmarks, linearExtrapolation) {\r\n    //If a benchmark was only found in one direction we simply use that benchmark to extrapolate a state for the target CR\r\n    //If benchmarks were found above and below, we calculate the target result for BOTH benchmarks, then take a weighted average based on which is closer\r\n    //So if the upper benchmark is 1 step away, and the lower benchmark is 4 steps away, then the upper will count for 80% of the average\r\n    let upperValue, lowerValue;\r\n    if (benchmarks.upper) {\r\n        if (linearExtrapolation) {\r\n            let offset = benchmarks.upper[stat] - averageStats[benchmarks.upper.cr][stat];\r\n            upperValue = offset + averageStats[targetCR][stat];\r\n        } else {\r\n            let ratio = benchmarks.upper[stat] / averageStats[benchmarks.upper.cr][stat];\r\n            upperValue = ratio * averageStats[targetCR][stat];\r\n        }\r\n    }\r\n    if (benchmarks.lower) {\r\n        if (linearExtrapolation) {\r\n            let offset = benchmarks.lower[stat] - averageStats[benchmarks.lower.cr][stat];\r\n            lowerValue = offset + averageStats[targetCR][stat];\r\n        } else {\r\n            let ratio = benchmarks.lower[stat] / averageStats[benchmarks.lower.cr][stat];\r\n            lowerValue = ratio * averageStats[targetCR][stat];\r\n        }\r\n    }\r\n\r\n    if (lowerValue) {\r\n        if (upperValue) {\r\n            //If upper and lower take a weighted average\r\n            let upperStep = stepForCR(benchmarks.upper.cr);\r\n            let lowerStep = stepForCR(benchmarks.lower.cr);\r\n            let stepRange = upperStep - lowerStep;\r\n            let targetStep = stepForCR(targetCR);\r\n            let upperWeight = (upperStep - targetStep) / stepRange;\r\n            let lowerWeight = (targetStep - lowerStep) / stepRange;\r\n            return Math.round(upperWeight * upperValue + lowerWeight * lowerValue);\r\n        }\r\n        return Math.round(lowerValue);\r\n    }\r\n    return Math.round(upperValue);\r\n}\r\n\r\n/**\r\n * Calculates the modifier for an ability score\r\n *\r\n * @param {string} ability The ability score value\r\n * @return {number} The ability score modifier\r\n */\r\n function abilityScoreModifier(ability) {\r\n    return Math.floor((ability - 10) / 2);\r\n}\r\n\r\n/**\r\n * Calculates the hit dice per hit die for a creature\r\n *\r\n * @param {Object} statblock The statblock. Must have size and con\r\n * @return {number} The number of hit points\r\n */\r\n function hitPointsPerHitDie(statblock) {\r\n    return ((sizes[statblock.size].hitDie + 1) / 2) + abilityScoreModifier(statblock.con);\r\n}\r\n\r\n/**\r\n * Finds the closest benchmark that is below the target CR. If there are none then it returns the lowest benchmark.\r\n *\r\n * @param {string} stat The stat to search for\r\n * @param {string} targetCR The target challenge rating\r\n * @param {Object} selectedMonster The monster to search \r\n * @return {number} The number of hit points\r\n */\r\n function findNearestLowerBenchmark(stat, targetCR, selectedMonster) {\r\n    let numTargetCR = parseFloat(targetCR);\r\n    let statList = selectedMonster.stats;\r\n    let lowestValue;\r\n    let lowestCR = 31;\r\n    let highestValue;\r\n    let highestCR = 0;\r\n    for (let cr in statList) {\r\n        let numCR = parseFloat(cr);\r\n        if (statList[cr][stat]) {\r\n            if (numCR < lowestCR) {\r\n                lowestCR = cr;\r\n                lowestValue = statList[cr][stat];\r\n            }\r\n            if (numCR > highestCR && numCR <= numTargetCR) {\r\n                highestValue = statList[cr][stat];\r\n                highestCR = cr;\r\n            }\r\n        }\r\n    }\r\n    return highestValue != null ? highestValue : lowestValue;\r\n}\r\n\r\n/**\r\n * Returns a sentence case version of a string\r\n *\r\n * @param {string} stat The string to convert to sentence case\r\n * @return {string} The sentence case string\r\n */\r\n function toSentenceCase(targetString) {\r\n    return targetString[0].toUpperCase() + targetString.substr(1);\r\n }"],"names":["$","monster","monsterList","slug","appendTo","on","calculateSelectedMonster","selectedMonster","val","targetCR","derivedStats","lockedStats","Object","assign","stats","skills","size","sizeBenchmarks","findBenchmarksForStat","extrapolateFromBenchmark","Math","min","abilityScores","abilityModifiers","i","length","abilityBenchmarks","abilityScoreModifier","naturalArmor","acBenchmarks","benchmark","ac","dex","targetAC","max","hitDice","hpBenchmarks","currentBenchmark","hp","floor","hitPointsPerHitDie","targetHP","hpPerHD","round","html","findNearestLowerBenchmark","sizes","name","type","alignment","hitDie","con","show","skillString","skillModifier","averageStats","proficiency","modifierString","toSentenceCase","hide","passivePerceptionString","wis","includes","abilityScore","modifier","stepForCR","cr","safeCR","parseFloat","statList","Array","isArray","benchmarks","statBlock","allStatsFound","upper","lower","stat","linearExtrapolation","upperValue","lowerValue","offset","ratio","upperStep","lowerStep","stepRange","targetStep","upperWeight","lowerWeight","ability","statblock","numTargetCR","lowestValue","lowestCR","highestValue","highestCR","numCR","targetString","toUpperCase","substr"],"mappings":"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"}